<?php

namespace App\Http\Controllers;

use App\Models\Student;
use App\Models\Schedule;
use App\Models\Order;
use App\Models\Car;
use App\Models\Instructor;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class WhatsappController extends Controller
{
  /**
   * Base URL for WhatsApp API
   */
  protected function getWhatsappApiUrl()
  {
    return env('WHATSAPP_API_URL', 'http://localhost');
  }

  /**
   * Send WhatsApp message
   *
   * @param array|string $numbers
   * @param string $content
   * @return array
   */
  public function sendMessage($numbers, $content)
  {
    $url = $this->getWhatsappApiUrl() . '/api-keys/send-messages';
    $apiKey = env('WHATSAPP_KEY', '');
    
    Log::info('WhatsApp: Preparing to send message', [
      'url' => $url,
      'has_api_key' => !empty($apiKey),
      'numbers' => is_array($numbers) ? $numbers : [$numbers]
    ]);

    $payload = [
      'numbers' => is_array($numbers) ? $numbers : [$numbers],
      'content' => $content
    ];

    try {
      Log::info('WhatsApp: Sending API request');
      
      $response = Http::withHeaders([
        'x-api-key' => $apiKey
      ])->post($url, $payload);
      
      Log::info('WhatsApp: API response received', [
        'status' => $response->status(),
        'successful' => $response->successful(),
        'body' => $response->body()
      ]);

      return $response->json();
    } catch (\Exception $e) {
      Log::error('WhatsApp API Error: ' . $e->getMessage());
      return [
        'status' => 'error',
        'message' => $e->getMessage()
      ];
    }
  }

  /**
   * Send welcome message after registration
   *
   * @param \App\Models\Student $student
   * @return array
   */
  public function sendWelcomeMessage(Student $student)
  {
    try {
      Log::info('WhatsApp: Preparing welcome message', [
        'student_id' => $student->id,
        'student_name' => $student->name
      ]);
      
      $template = $this->getWelcomeTemplate($student->name);
      $result = $this->sendMessage($student->user->phone, $template);
      
      Log::info('WhatsApp: Welcome message sent', [
        'result' => $result
      ]);
      
      return $result;
    } catch (\Exception $e) {
      Log::error('WhatsApp: Error sending welcome message', [
        'error' => $e->getMessage()
      ]);
      return ['status' => 'error', 'message' => $e->getMessage()];
    }
  }

  /**
   * Send schedule update notification
   *
   * @param \App\Models\Student $student
   * @param \App\Models\Schedule $schedule
   * @return array
   */
  public function sendScheduleUpdateNotification(Student $student, Schedule $schedule)
  {
    try {
      Log::info('WhatsApp: Preparing schedule update notification', [
        'student_id' => $student->id,
        'student_name' => $student->name,
        'schedule_id' => $schedule->id,
        'phone' => $student->user->phone ?? 'No phone found'
      ]);
      
      $template = $this->getScheduleUpdateTemplate($student->name, $schedule);
      $result = $this->sendMessage($student->user->phone, $template);
      
      Log::info('WhatsApp: Schedule notification sent', [
        'result' => $result
      ]);
      
      return $result;
    } catch (\Exception $e) {
      Log::error('WhatsApp: Error sending schedule notification', [
        'error' => $e->getMessage(),
        'trace' => $e->getTraceAsString()
      ]);
      
      return [
        'status' => 'error',
        'message' => $e->getMessage()
      ];
    }
  }

  /**
   * Send payment confirmation
   *
   * @param \App\Models\Student $student
   * @param \App\Models\Order $order
   * @return array
   */
  public function sendPaymentConfirmation(Student $student, Order $order)
  {
    try {
      Log::info('WhatsApp: Preparing payment confirmation', [
        'student_id' => $student->id,
        'student_name' => $student->name,
        'order_id' => $order->id
      ]);
      
      $template = $this->getPaymentConfirmationTemplate($student->name, $order);
      $result = $this->sendMessage($student->user->phone, $template);
      
      Log::info('WhatsApp: Payment confirmation sent', [
        'result' => $result
      ]);
      
      return $result;
    } catch (\Exception $e) {
      Log::error('WhatsApp: Error sending payment confirmation', [
        'error' => $e->getMessage()
      ]);
      return ['status' => 'error', 'message' => $e->getMessage()];
    }
  }

  /**
   * Send reminder message
   *
   * @param \App\Models\Student $student
   * @param \App\Models\Schedule $schedule
   * @return array
   */
  public function sendReminderMessage(Student $student, Schedule $schedule)
  {
    try {
      Log::info('WhatsApp: Preparing reminder message', [
        'student_id' => $student->id,
        'student_name' => $student->name,
        'schedule_id' => $schedule->id
      ]);
      
      $template = $this->getReminderTemplate($student->name, $schedule);
      $result = $this->sendMessage($student->user->phone, $template);
      
      Log::info('WhatsApp: Reminder message sent', [
        'result' => $result
      ]);
      
      return $result;
    } catch (\Exception $e) {
      Log::error('WhatsApp: Error sending reminder message', [
        'error' => $e->getMessage()
      ]);
      return ['status' => 'error', 'message' => $e->getMessage()];
    }
  }

  /**
   * Get welcome template message
   *
   * @param string $name
   * @return string
   */
  protected function getWelcomeTemplate($name)
  {
    return "Halo {$name}! üëã\n\n" .
      "Selamat datang di *Natuna Jaya Driving School*! üöó\n\n" .
      "Terima kasih telah mendaftar di kursus kami. Kami sangat senang Anda memilih kami untuk membantu Anda mendapatkan SIM dan menjadi pengemudi yang terampil.\n\n" .
      "Tim kami akan segera menghubungi Anda untuk mengkonfirmasi jadwal kursus pertama Anda.\n\n" .
      "Jika Anda memiliki pertanyaan, jangan ragu untuk menghubungi kami.\n\n" .
      "Salam,\n" .
      "Tim Natuna Jaya Driving School";
  }

  /**
   * Get schedule update template message
   *
   * @param string $name
   * @param \App\Models\Schedule $schedule
   * @return string
   */
  protected function getScheduleUpdateTemplate($name, Schedule $schedule)
  {
    try {
      $dateTime = $schedule->start_date ? $schedule->start_date->format('d M Y - H:i') : 'Jadwal belum ditentukan';
      
      // Safely get instructor name
      $instructor = 'Instruktor';
      if ($schedule->instructor_id && $schedule->instructor) {
        $instructor = $schedule->instructor->name ?? 'Instruktor';
      }
      
      Log::info('WhatsApp: Generated schedule update template', [
        'name' => $name,
        'dateTime' => $dateTime,
        'instructor' => $instructor
      ]);

      return "Halo {$name}! üìÖ\n\n" .
        "*Pemberitahuan Perubahan Jadwal Kursus Mengemudi*\n\n" .
        "Jadwal kursus mengemudi Anda telah diperbarui:\n" .
        "üìÜ Tanggal & Waktu: {$dateTime} WIB\n" .
        "üë®‚Äçüè´ Instruktur: {$instructor}\n\n" .
        "Terima kasih,\n" .
        "Tim Natuna Jaya Driving School";
    } catch (\Exception $e) {
      Log::error('WhatsApp: Error generating schedule template', [
        'error' => $e->getMessage()
      ]);
      
      // Fallback template
      return "Halo {$name}!\n\nJadwal kursus mengemudi Anda telah diperbarui. Silakan cek aplikasi untuk detailnya.\n\nTerima kasih,\nTim Natuna Jaya Driving School";
    }
  }

  /**
   * Get payment confirmation template message
   *
   * @param string $name
   * @param \App\Models\Order $order
   * @return string
   */
  protected function getPaymentConfirmationTemplate($name, Order $order)
  {
    try {
      $amount = number_format($order->amount, 0, ',', '.');
      $invoiceId = $order->invoice_id ?? $order->id;
      $date = now()->format('d M Y');

      Log::info('WhatsApp: Generated payment confirmation template', [
        'name' => $name,
        'invoice' => $invoiceId,
        'amount' => $amount
      ]);

      return "Halo {$name}! üí≥\n\n" .
        "*Konfirmasi Pembayaran Berhasil*\n\n" .
        "Terima kasih! Pembayaran Anda sebesar Rp {$amount} untuk Invoice #{$invoiceId} telah kami terima.\n\n" .
        "Detail Pembayaran:\n" .
        "üßæ Invoice ID: #{$invoiceId}\n" .
        "üí∞ Jumlah: Rp {$amount}\n" .
        "üìÖ Tanggal: {$date}\n\n" .
        "Silakan cek aplikasi atau website kami untuk melihat detail jadwal kursus Anda.\n\n" .
        "Terima kasih,\n" .
        "Tim Natuna Jaya Driving School";
    } catch (\Exception $e) {
      Log::error('WhatsApp: Error generating payment template', [
        'error' => $e->getMessage()
      ]);
      
      // Fallback template
      return "Halo {$name}!\n\nPembayaran Anda telah berhasil. Terima kasih.\n\nTim Natuna Jaya Driving School";
    }
  }

  /**
   * Get reminder template message
   *
   * @param string $name
   * @param \App\Models\Schedule $schedule
   * @return string
   */
  protected function getReminderTemplate($name, Schedule $schedule)
  {
    try {
      $dateTime = $schedule->start_date ? $schedule->start_date->format('d M Y - H:i') : 'Jadwal belum ditentukan';
      
      // Safely get instructor name
      $instructor = 'Instruktor';
      if ($schedule->instructor_id && $schedule->instructor) {
        $instructor = $schedule->instructor->name ?? 'Instruktor';
      }
      
      // Get car details if available
      $car = 'Mobil yang ditentukan';
      if ($schedule->car_id && $schedule->car) {
        $car = $schedule->car->name ?? 'Mobil yang ditentukan';
      }
      
      $location = 'Natuna Jaya Driving School';

      Log::info('WhatsApp: Generated reminder template', [
        'name' => $name,
        'dateTime' => $dateTime,
        'instructor' => $instructor,
        'car' => $car
      ]);

      return "Halo {$name}! ‚è∞\n\n" .
        "*Pengingat Jadwal Kursus Mengemudi*\n\n" .
        "Mengingatkan bahwa Anda memiliki jadwal kursus mengemudi besok:\n" .
        "üìÜ Tanggal & Waktu: {$dateTime} WIB\n" .
        "üë®‚Äçüè´ Instruktur: {$instructor}\n" .
        "üöó Kendaraan: {$car}\n" .
        "üìç Lokasi: {$location}\n\n" .
        "Pastikan Anda hadir tepat waktu dan membawa perlengkapan yang diperlukan.\n\n" .
        "Jika Anda perlu menjadwalkan ulang, harap hubungi kami segera.\n\n" .
        "Terima kasih,\n" .
        "Tim Natuna Jaya Driving School";
    } catch (\Exception $e) {
      Log::error('WhatsApp: Error generating reminder template', [
        'error' => $e->getMessage()
      ]);
      
      // Fallback template
      return "Halo {$name}!\n\nIni adalah pengingat untuk jadwal kursus mengemudi Anda besok. Silakan cek aplikasi untuk detailnya.\n\nTerima kasih,\nTim Natuna Jaya Driving School";
    }
  }
}
